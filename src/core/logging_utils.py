"""Logging utilities for the EU4 Dynamic Names Generator.

This module provides consistent logging functions for different components
of the dynamic names generation process.
"""


def log_master(message: str):
    """Log a message from the master generator process."""
    print(f"[master] {message}")


def log_module(module: str, message: str):
    """Log a success message for a specific module."""
    print(f"[{module}] {message}")


def log_product(module_1: str, module_2: str, message: str):
    """Log a success message for a specific product (module pair)."""
    print(f"[{module_1}_{module_2}] {message}")


def log_warning(component: str, message: str):
    """Log a warning message with component identification."""
    print(f"[{component}] WARNING: {message}")


def log_error(component: str, message: str):
    """Log an error message with component identification."""
    print(f"[{component}] ERROR: {message}")


def print_separator(char: str = "=", length: int = 80):
    """Print a separator line for better output formatting."""
    print(char * length)


def print_section_header(title: str):
    """Print a formatted section header."""
    print_separator()
    print(f" {title}")
    print_separator()


def print_duplicate_keys_summary(duplicate_keys: dict, duplicate_count: int):
    """Print a formatted summary of duplicate keys."""
    if duplicate_keys:
        log_master(
            f"\nDUPLICATE KEYS SUMMARY: Found {duplicate_count} duplicate localisation keys:"
        )
        print_separator()
        for key, products in sorted(duplicate_keys.items()):
            print(f"\nKey: {key}")
            print(f"Generated by: {', '.join(products)}")
        print_separator()
    else:
        log_master("\nSUCCESS: No duplicate localisation keys found!")


def print_final_statistics(total_products: int, total_unique_keys: int, duplicate_count: int):
    """Print final generation statistics."""
    log_master(f"Total products built: {total_products}")
    log_master(f"Total unique keys: {total_unique_keys}")
    if duplicate_count > 0:
        log_master(f"Duplicate keys: {duplicate_count}")